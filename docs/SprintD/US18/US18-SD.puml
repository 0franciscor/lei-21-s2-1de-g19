@startuml
'https://plantuml.com/sequence-diagram

autonumber

actor "Administrator" as A
activate A


A -> ":SendReportUI" : send the covid-19 report to the NHS
activate ":SendReportUI"
":SendReportUI" --> A: define the date to see the report (dateToSee), the interval of dates, the number of historical day/weeks points (histPoints), \n select between a simple linear and multilinear regression model\n, independent variables (i.e.: meanAge, dailyNumberTests) and define the significance level (sigLevel)
deactivate ":SendReportUI"

A -> ":SendReportUI" : types and selects the requested data
activate ":SendReportUI"
":SendReportUI" -> ":SendReportController": getAllTestWithResultCovidPositive(dateToSee, histPoints)

activate ":SendReportController"
":SendReportController" -> ":Company" : store = getTestStore()
activate ":Company"
deactivate ":Company"

":SendReportController" -> "Utils" : lstDateExceptSundays = getDaysWithoutSyndays(dateToSee, histPoints)
activate "Utils"
deactivate "Utils"



loop for each date of the list
":SendReportController" -> ":store: TestStore" : lstAllTestWithResultCovidPositive = getAllTestWithResultCovidPositive(date)
activate ":store: TestStore"
deactivate ":store: TestStore"
end

":SendReportController" -> ":store: TestStore" : arrayY = getDailyPositiveTests(lstAllTestWithResultCovidPositive)
activate ":store: TestStore"
deactivate ":store: TestStore"

deactivate ":SendReportController"


alt if the user chooses simple linear regression
":SendReportUI" -> ":SendReportController" : SimpleLinearRegression(userIntention, sigLevel)
activate ":SendReportController"

alt if the user chooses daily number tests

":SendReportController" -> ":SendReportController" : i = 0
activate ":SendReportController"
deactivate ":SendReportController"

loop for each date on the list1
note over ":SendReportController" : a double array which is filled with the number of daily positive tests
":SendReportController" -> ":store: TestStore" : dailyNumberTests[i] = getDailyPerformedTest(date)
activate ":store: TestStore"
deactivate ":store: TestStore"


":SendReportController" -> ":SendReportController" ++: i = i+1
deactivate ":SendReportController"
end

else or mean age

":SendReportController" -> ":Company" : store = getTestStore()
activate ":Company"
deactivate

loop for each date of the list
":SendReportController" -> ":store: TestStore" : lstAllTestWithResultCovid = getAllTestWithResultCovid(date)
activate ":store: TestStore"
deactivate ":store: TestStore"
end






":SendReportController" -> ":store: TestStore" : meanAge[i] = getMeanAgeFromList (lstAllTestWithResultCovid)
activate ":store: TestStore"
deactivate ":store: TestStore"
end


":SendReportController" --> ":Company" : report = generateNHSReport(sigLevel)
activate ":Company"
create "report : NHSReport"
":Company" --> "report : NHSReport" : create(sigLevel)
deactivate ":Company"

note over ":SendReportController" : arrayX can be dailyNumberTests or meanAge

":SendReportController" -> "report : NHSReport": data = calculateData(arrayX, arrayY, sigLevel)
activate "report : NHSReport"



create ":LinearRegression"

"report : NHSReport" --> ":LinearRegression" : create(arrayX, arrayY)
deactivate "report : NHSReport"
deactivate ":SendReportController"



else the user chooses multilinear regression
":SendReportUI" -> ":SendReportController" : MultilinearRegression()
activate ":SendReportController"



":SendReportController" -> ":store: TestStore" : dailyNumberPositiveTests = getDailyPositiveTests (lstAllTestWithResultCovidPositive)
activate ":store: TestStore"
deactivate ":store: TestStore"

":SendReportController" -> ":store: TestStore" : meanAge = getMeanAgeFromList (lstAllTestWithResultCovidPositive)
activate ":store: TestStore"
deactivate ":store: TestStore"

create ":MultilinearRegression"
":SendReportController" --> ":MultilinearRegression" : create(arrayX, arrayY)

deactivate ":SendReportController"
end



":SendReportUI" -> ":SendReportController" : generateNHSReport()
activate ":SendReportController"


deactivate ":Company"



":SendReportController" -> "Report2NHS": writeUsingFileWriter(data)

activate "Report2NHS"

deactivate "Report2NHS"

deactivate ":SendReportController"

":SendReportUI" --> A: informs operation success
deactivate ":SendReportUI"



@enduml