@startuml
autonumber
actor "LaboratoryCoordinator" as labC
activate labC

participant ":validateTestUI" as validateTestUI
participant ":validateTestController" as validateTestCont
participant "store:TestStore" as TestStore
participant ":Company" as comp
participant "TestMapper" as TestMapper
participant "store:ReportStore" as ReportStore

labC -> validateTestUI : validate a Test Result/Diagnosis

activate validateTestUI
validateTestUI -> validateTestCont: getAllTestsDto()


activate validateTestCont

validateTestCont -> comp : store = getParameterCategoryStore()
activate comp
deactivate comp


create "testsList: list<Test>" as testsList

validateTestCont --> testsList : create()

validateTestCont -> TestStore : testsList = getAllTests()
activate TestStore
deactivate TestStore

create "testsListDto: list<TestDto>" as testsListDto
validateTestCont --> testsListDto : create()



ref over validateTestCont, TestMapper : testsListDto = toDto(testsList)




deactivate validateTestCont


validateTestUI --> labC : shows a list of to-be validated tests
deactivate validateTestUI


alt testsListDto.size() == 1
labC -> validateTestUI : selects a test from the list
activate validateTestUI
validateTestUI --> labC : displays its data (registration date, chemical analysis date, diagnosis date) and request to chose if its valid
deactivate validateTestUI

else testsListDto.size() != 1

loop for how many tests the Laboratory Coordinator wants to validate
labC -> validateTestUI : selects a test from the list
activate validateTestUI
validateTestUI --> labC : displays its data (registration date, chemical analysis date, diagnosis date) and request to chose if its valid
deactivate validateTestUI
end
end alt



deactivate validateTestUI


loop until the user confirms the selected state
labC -> validateTestUI : selects the desired state
activate validateTestUI


validateTestUI --> labC : shows it and requests a confirmation
deactivate validateTestUI

labC -> validateTestUI : confirms the selected state
activate validateTestUI
end


validateTestUI -> validateTestCont : validateTest(testDto.getCode())


activate validateTestCont
validateTestCont -> ReportStore : validateReport(code)
activate ReportStore
deactivate ReportStore

validateTestCont -> TestStore : validateTest()
activate TestStore


TestStore -> Test : checkTestStatus()
activate est
deactivate Test
deactivate TestStore





validateTestUI --> labC
deactivate validateTestCont
deactivate validateTestUI
@enduml